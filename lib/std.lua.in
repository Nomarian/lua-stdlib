--[[--
 Enhanced Lua core functions, and others.

 After requiring this module, simply referencing symbols in the
 submodule hierarchy will load the necessary modules on demand.

 By default there are no changes to any global symbols, or monkey
 patching of core module tables and metatables.  However, sometimes it's
 still convenient to do that: For example, when using stdlib from the
 REPL, or in a prototype where you want to throw caution to the wind and
 compatibility with other modules be damned. In that case, you can give
 stdlib permission to scribble all over your namespaces by using the
 various `monkey_patch` calls in the library.

 @todo Write a style guide (indenting/wrapping, capitalisation,
   function and variable names); library functions should call
   error, not die; OO vs non-OO (a thorny problem).
 @todo pre-compile.
 @corefunction std
]]


local _G		= _G
local ipairs		= ipairs
local pairs		= pairs
local pcall		= pcall
local rawset		= rawset
local require		= require
local setmetatable	= setmetatable
local type		= type


local _ = {
  debug			= require "std.debug",
  strict		= require "std.strict",
  std			= require "std.base",
}

local _assert		= _.std.assert
local _ipairs		= _.std.ipairs
local _pairs		= _.std.pairs
local _require		= _.std.require
local _tostring		= _.std.tostring
local _type		= _.std.type
local argscheck		= _.debug.argscheck
local copy		= _.std.base.copy
local elems		= _.std.elems
local eval		= _.std.eval
local getmetamethod	= _.std.getmetamethod
local ielems		= _.std.ielems
local ireverse		= _.std.ireverse
local npairs		= _.std.npairs
local ripairs		= _.std.ripairs
local rnpairs		= _.std.rnpairs

local _, _ENV		= nil, _.strict {}



--[[ =============== ]]--
--[[ Implementation. ]]--
--[[ =============== ]]--


local M, monkeys


local function monkey_patch (namespace)
  copy (namespace or _G, monkeys)
  return M
end


local function barrel (namespace)
  namespace = namespace or _G

  -- Older releases installed the following into _G by default.
  for _, name in pairs {
    "functional.bind", "functional.collect", "functional.compose",
    "functional.curry", "functional.filter", "functional.id",
    "functional.map",

    "io.die", "io.warn",

    "string.pickle", "string.prettytostring", "string.render",

    "table.pack",

    "tree.ileaves", "tree.inodes", "tree.leaves", "tree.nodes",
  } do
    local module, method = name:match "^(.*)%.(.-)$"
    namespace[method] = M[module][method]
  end

  -- Support old api names, for backwards compatibility.
  namespace.fold = M.functional.fold
  namespace.metamethod = M.getmetamethod
  namespace.op = M.operator
  namespace.require_version = M.require

  require "std.io".monkey_patch (namespace)
  require "std.math".monkey_patch (namespace)
  require "std.string".monkey_patch (namespace)
  require "std.table".monkey_patch (namespace)

  return monkey_patch (namespace)
end



--[[ ================= ]]--
--[[ Public Interface. ]]--
--[[ ================= ]]--


local function X (decl, fn)
  return argscheck ("std." .. decl, fn)
end

M = {
  --- Release version string.
  -- @field version
  version = "General Lua libraries / @VERSION@",


  --- Core Functions
  -- @section corefuncs

  --- Enhance core `assert` to also allow formatted arguments.
  -- @function assert
  -- @param expect expression, expected to be *truthy*
  -- @string[opt=""] f format string
  -- @param[opt] ... arguments to format
  -- @return value of *expect*, if *truthy*
  -- @usage
  -- std.assert (expect == nil, "100% unexpected!")
  -- std.assert (expect == "expect", "%s the unexpected!", expect)
  assert = X ("assert (?any, ?string, [any...])", _assert),

  --- Evaluate a string as Lua code.
  -- @function eval
  -- @string s string of Lua code
  -- @return result of evaluating `s`
  -- @usage
  -- --> 2
  -- std.eval "math.min (2, 10)"
  eval = X ("eval (string)", eval),

  --- Return named metamethod, if any, otherwise `nil`.
  -- The value found at the given key in the metatable of *x* must be a
  -- function or have its own `__call` metamethod to qualify as a
  -- callable. Any other value found at key *n* will cause this function
  -- to return `nil`.
  -- @function getmetamethod
  -- @param x item to act on
  -- @string n name of metamethod to lookup
  -- @treturn callable|nil callable metamethod, or `nil` if no metamethod
  -- @usage
  -- clone = std.getmetamethod (std.object.prototype, "__call")
  getmetamethod = X ("getmetamethod (?any, string)", getmetamethod),

  --- Enhance core `tostring` to render table contents as a string.
  -- @function tostring
  -- @param x object to convert to string
  -- @treturn string compact string rendering of *x*
  -- @usage
  -- -- {1=baz,foo=bar}
  -- print (std.tostring {foo="bar","baz"})
  tostring = X ("tostring (?any)", _tostring),

  --- Type of an object, or primitive.
  -- @function type
  -- @param x anything
  -- @treturn string type of *x*
  -- @see std.object.type
  type = X ("type (?any)", _type),


  --- Module Functions
  -- @section modulefuncs

  --- A [barrel of monkey_patches](http://dictionary.reference.com/browse/barrel+of+monkeys).
  --
  -- Apply **all** of stdlib's `monkey_patch` functions to *namespace*.
  --
  -- Additionally, for backwards compatibility only, write an historical
  -- selection of stdlib submodule functions into the given namespace too
  -- (at least until the next major release).
  -- @function barrel
  -- @tparam[opt=_G] table namespace where to install global functions
  -- @treturn table module table
  -- @usage local std = require "std".barrel ()
  barrel = X ("barrel (?table)", barrel),

  --- Overwrite core methods and metamethods with `std` enhanced versions.
  --
  -- Write all functions from this module, except `std.barrel` and
  -- `std.monkey_patch`, into *namespace*.
  -- @function monkey_patch
  -- @tparam[opt=_G] table namespace where to install global functions
  -- @treturn table the module table
  -- @usage local std = require "std".monkey_patch ()
  monkey_patch = X ("monkey_patch (?table)", monkey_patch),

  --- Enhance core `require` to assert version number compatibility.
  -- By default match against the last substring of (dot-delimited)
  -- digits in the module version string.
  -- @function require
  -- @string module module to require
  -- @string[opt] min lowest acceptable version
  -- @string[opt] too_big lowest version that is too big
  -- @string[opt] pattern to match version in `module.version` or
  --  `module._VERSION` (default: `"([%.%d]+)%D*$"`)
  -- @usage
  -- -- posix.version == "posix library for Lua 5.2 / 32"
  -- posix = require ("posix", "29")
  require = X ("require (string, ?string, ?string, ?string)", _require),

  --- Iterator Functions
  -- @section iteratorfuncs

  --- An iterator over all values of a table.
  -- If *t* has a `__pairs` metamethod, use that to iterate.
  -- @function elems
  -- @tparam table t a table
  -- @treturn function iterator function
  -- @treturn table *t*, the table being iterated over
  -- @return *key*, the previous iteration key
  -- @see ielems
  -- @see pairs
  -- @usage
  -- --> foo
  -- --> bar
  -- --> baz
  -- --> 5
  -- std.functional.map (print, std.ielems, {"foo", "bar", [4]="baz", d=5})
  elems = X ("elems (table)", elems),

  --- An iterator over the integer keyed elements of a table.
  --
  -- If *t* has a `__len` metamethod, iterate up to the index it
  -- returns, otherwise up to the first `nil`.
  --
  -- This function does **not** support the Lua 5.2 `__ipairs` metamethod.
  -- @function ielems
  -- @tparam table t a table
  -- @treturn function iterator function
  -- @treturn table *t*, the table being iterated over
  -- @treturn int *index*, the previous iteration index
  -- @see elems
  -- @see ipairs
  -- @usage
  -- --> foo
  -- --> bar
  -- std.functional.map (print, std.ielems, {"foo", "bar", [4]="baz", d=5})
  ielems = X ("ielems (table)", ielems),

  --- An iterator over integer keyed pairs of a sequence.
  --
  -- Like Lua 5.1 and 5.3, this iterator returns successive key-value
  -- pairs with integer keys starting at 1, up to the first `nil` valued
  -- pair.
  --
  -- If there is a `_len` metamethod, keep iterating up to and including
  -- that element, regardless of any intervening `nil` values.
  --
  -- This function does **not** support the Lua 5.2 `__ipairs` metamethod.
  -- @function ipairs
  -- @tparam table t a table
  -- @treturn function iterator function
  -- @treturn table *t*, the table being iterated over
  -- @treturn int *index*, the previous iteration index
  -- @see ielems
  -- @see npairs
  -- @see pairs
  -- @usage
  -- --> 1	foo
  -- --> 2	bar
  -- std.functional.map (print, std.ipairs, {"foo", "bar", [4]="baz", d=5})
  ipairs = X ("ipairs (table)", _ipairs),

  --- Return a new sequence with element order reversed.
  --
  -- Apart from the order of the elements returned, this function follows
  -- the same rules as @{ipairs} for determining first and last elements.
  -- @function ireverse
  -- @tparam table t a table
  -- @treturn table a new table with integer keyed elements in reverse
  --   order with respect to *t*
  -- @see ielems
  -- @see ipairs
  -- @usage
  -- local rielems = std.functional.compose (std.ireverse, std.ielems)
  -- --> bar
  -- --> foo
  -- std.functional.map (print, rielems, {"foo", "bar", [4]="baz", d=5})
  ireverse = X ("ireverse (table)", ireverse),

  --- Ordered iterator for integer keyed values.
  -- Like ipairs, but does not stop until the __len or maxn of *t*.
  -- @function npairs
  -- @tparam table t a table
  -- @treturn function iterator function
  -- @treturn table t
  -- @see ipairs
  -- @see rnpairs
  -- @usage
  -- --> 1	foo
  -- --> 2	bar
  -- --> 3	nil
  -- --> 4	baz
  -- std.functional.map (print, std.npairs, {"foo", "bar", [4]="baz", d=5})
  npairs = X ("npairs (table)", npairs),

  --- Enhance core `pairs` to respect `__pairs` even in Lua 5.1.
  -- @function pairs
  -- @tparam table t a table
  -- @treturn function iterator function
  -- @treturn table *t*, the table being iterated over
  -- @return *key*, the previous iteration key
  -- @see elems
  -- @see ipairs
  -- @usage
  -- --> 1	foo
  -- --> 2	bar
  -- --> 4	baz
  -- --> d	5
  -- std.functional.map (print, std.pairs, {"foo", "bar", [4]="baz", d=5})
  pairs = X ("pairs (table)", _pairs),

  --- An iterator like ipairs, but in reverse.
  -- Apart from the order of the elements returned, this function follows
  -- the same rules as @{ipairs} for determining first and last elements.
  -- @function ripairs
  -- @tparam table t any table
  -- @treturn function iterator function
  -- @treturn table *t*
  -- @treturn number `#t + 1`
  -- @see ipairs
  -- @see rnpairs
  -- @usage
  -- --> 2	bar
  -- --> 1	foo
  -- std.functional.map (print, std.ripairs, {"foo", "bar", [4]="baz", d=5})
  ripairs = X ("ripairs (table)", ripairs),

  --- An iterator like npairs, but in reverse.
  -- Apart from the order of the elements returned, this function follows
  -- the same rules as @{npairs} for determining first and last elements.
  -- @function rnpairs
  -- @tparam table t a table
  -- @treturn function iterator function
  -- @treturn table t
  -- @see npairs
  -- @see ripairs
  -- @usage
  -- --> 4	baz
  -- --> 3	nil
  -- --> 2	bar
  -- --> 1	foo
  -- std.functional.map (print, std.rnpairs, {"foo", "bar", [4]="baz", d=5})
  rnpairs = X ("rnpairs (table)", rnpairs),
}


monkeys = copy ({}, M)

-- Don't monkey_patch these apis into _G!
for _, api in ipairs {"barrel", "monkey_patch", "version"} do
  monkeys[api] = nil
end


--- Metamethods
-- @section Metamethods

return setmetatable (M, {
  --- Lazy loading of stdlib modules.
  -- Don't load everything on initial startup, wait until first attempt
  -- to access a submodule, and then load it on demand.
  -- @function __index
  -- @string name submodule name
  -- @treturn table|nil the submodule that was loaded to satisfy the missing
  --   `name`, otherwise `nil` if nothing was found
  -- @usage
  -- local std = require "std"
  -- local Object = std.object.prototype
  __index = function (self, name)
              local ok, t = pcall (require, "std." .. name)
              if ok then
		rawset (self, name, t)
		return t
	      end
	    end,
})
