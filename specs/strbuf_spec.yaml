before:
  object = require "std.object"
  StrBuf = require "std.strbuf"
  b      = StrBuf {"foo", "bar"}

specify std.strbuf:
- describe require:
  - it does not perturb the global namespace:
      expect (show_apis {added_to="_G", by="std.strbuf"}).
        to_equal {}


- describe construction:
  - context from StrBuf clone method:
    - it constructs a new strbuf:
        b = StrBuf:clone {}
        expect (b).not_to_be (StrBuf)
        expect (object.type (b)).to_be "StrBuf"
    - it reuses the StrBuf metatable:
        a, b = StrBuf:clone {"a"}, StrBuf:clone {"b"}
        expect (getmetatable (a)).to_be (getmetatable (b))
    - it initialises strbuf with constructor parameters:
        a = StrBuf:clone {"foo", "bar"}
        expect (a).to_equal (b)
    - it serves as a prototype for new instances:
        obj = b:clone {}
        expect (object.type (obj)).to_be "StrBuf"
        expect (obj).to_equal (b)
        expect (getmetatable (obj)).to_be (getmetatable (b))

  # StrBuf {args} is just syntactic sugar for StrBuf:clone {args}
  - context from StrBuf object prototype:
    - it constructs a new strbuf:
        b = StrBuf {}
        expect (b).not_to_be (StrBuf)
        expect (object.type (b)).to_be "StrBuf"
    - it reuses the StrBuf metatable:
        a, b = StrBuf {"a"}, StrBuf {"b"}
        expect (getmetatable (a)).to_be (getmetatable (b))
    - it initialises strbuf with constructor parameters:
        a = StrBuf:clone {"foo", "bar"}
        expect (a).to_equal (b)
    - it serves as a prototype for new instances:
        obj = b {}
        expect (object.type (obj)).to_be "StrBuf"
        expect (obj).to_equal (b)
        expect (getmetatable (obj)).to_be (getmetatable (b))


- describe tostring:
  - it can be called from strbuf module:
      expect (StrBuf.tostring (b)).to_be "foobar"
  - it can be called as a strbuf object method:
      expect (b:tostring ()).to_be "foobar"
  - it can be called as a strbuf metabethod:
      expect (tostring (b)).to_be "foobar"


- describe concat:
  - before:
      b = StrBuf {"foo", "bar"}
  - it can be called from strbuf module:
      b = StrBuf.concat (b, "baz")
      expect (object.type (b)).to_be "StrBuf"
      expect (StrBuf.tostring (b)).to_be "foobarbaz"
  - it can be called as a strbuf object method:
      b:concat "baz"
      expect (object.type (b)).to_be "StrBuf"
      expect (b:tostring()).to_be "foobarbaz"
  - it can be called as a strbuf metamethod:
      b = b .. "baz"
      expect (object.type (b)).to_be "StrBuf"
      expect (tostring (b)).to_be "foobarbaz"
