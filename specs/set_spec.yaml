before:
  Set       = require "std.set"
  prototype = require "std.object".prototype
  s         = Set {"foo", "bar", "bar"}

specify std.set:
- describe require:
  - it does not perturb the global namespace:
      expect (show_apis {added_to="_G", by="std.set"}).
        to_equal {}


- describe construction:
  - it constructs a new set:
      s = Set {}
      expect (s).not_to_be (Set)
      expect (prototype (s)).to_be "Set"
  - it initialises set with constructor parameters:
      t = Set {"foo", "bar", "bar"}
      expect (t).to_equal (s)
  - it serves as a prototype for new instances:
      obj = s {}
      expect (prototype (obj)).to_be "Set"
      expect (obj).to_equal (s)
      expect (getmetatable (obj)).to_be (getmetatable (s))


- describe delete:
  - context when called as a Set module function:
    - before:
        s = Set {"foo", "bar", "baz"}
    - it returns a set object:
        expect (prototype (Set.delete (s, "foo"))).to_be "Set"
    - it is destructive:
        Set.delete (s, "bar")
        expect (s).not_to_have_member "bar"
    - it returns the modified set:
        expect (Set.delete (s, "baz")).not_to_have_member "baz"
    - it ignores removal of non-members: |
        clone = s {}
        expect (Set.delete (s, "quux")).to_equal (clone)
    - it deletes a member from the set:
        expect (s).to_have_member "bar"
        Set.delete (s, "bar")
        expect (s).not_to_have_member "bar"
    - it works with an empty set:
        expect (Set.delete (Set {}, "quux")).to_equal (Set {})


- describe difference:
  - before:
      r = Set {"foo", "bar", "baz"}
      s = Set {"bar", "baz", "quux"}

  - context when called as a Set module function:
    - it returns a set object:
        expect (prototype (Set.difference (r, s))).to_be "Set"
    - it is non-destructive:
        Set.difference (r, s)
        expect (r).to_equal (Set {"foo", "bar", "baz"})
        expect (s).to_equal (Set {"bar", "baz", "quux"})
    - it returns a set containing members of the first that are not in the second:
        expect (Set.difference (r, s)).to_equal (Set {"foo"})
  - context when called as a set metamethod:
    - it returns a set object:
        expect (prototype (r - s)).to_be "Set"
    - it is non-destructive:
        q = r - s
        expect (r).to_equal (Set {"foo", "bar", "baz"})
        expect (s).to_equal (Set {"bar", "baz", "quux"})
    - it returns a set containing members of the first that are not in the second:
        expect (r - s).to_equal (Set {"foo"})


- describe elems:
  - before:
      s = Set {"foo", "bar", "baz"}

  - context when called as a Set module function:
    - it is an iterator over set members:
        t = {}
        for e in Set.elems (s) do table.insert (t, e) end
        table.sort (t)
        expect (t).to_equal {"bar", "baz", "foo"}
    - it works for an empty set:
        t = {}
        for e in Set.elems (Set {}) do table.insert (t, e) end
        expect (t).to_equal {}


- describe insert:
  - context when called as a Set module function:
    - before:
        s = Set {"foo"}
    - it returns a set object:
        expect (prototype (Set.insert (s, "bar"))).to_be "Set"
    - it is destructive:
        Set.insert (s, "bar")
        expect (s).to_have_member "bar"
    - it returns the modified set:
        expect (Set.insert (s, "baz")).to_have_member "baz"
    - it ignores insertion of existing members:
        expect (Set.insert (s, "foo")).to_equal (Set {"foo"})
    - it inserts a new member into the set:
        expect (s).not_to_have_member "bar"
        Set.insert (s, "bar")
        expect (s).to_have_member "bar"
    - it works with an empty set:
        expect (Set.insert (Set {}, "foo")).to_equal (s)
  - context when called as a set metamethod:
    - before:
        s = Set {"foo"}
    - it returns a set object:
        s["bar"] = true
        expect (prototype (s)).to_be "Set"
    - it is destructive:
        s["bar"] = true
        expect (s).to_have_member "bar"
    - it ignores insertion of existing members:
        s["foo"] = true
        expect (s).to_equal (Set {"foo"})
    - it inserts a new member into the set:
        expect (s).not_to_have_member "bar"
        s["bar"] = true
        expect (s).to_have_member "bar"
    - it works with an empty set:
        s = Set {}
        s.foo = true
        expect (s).to_equal (s)


- describe intersection:
  - before:
      r = Set {"foo", "bar", "baz"}
      s = Set {"bar", "baz", "quux"}

  - context when called as a Set module function:
    - it returns a set object:
        expect (prototype (Set.intersection (r, s))).to_be "Set"
    - it is non-destructive:
        Set.intersection (r, s)
        expect (r).to_equal (Set {"foo", "bar", "baz"})
        expect (s).to_equal (Set {"bar", "baz", "quux"})
    - it returns a set containing members common to both arguments:
        expect (Set.intersection (r, s)).
          to_equal (Set {"bar", "baz"})
  - context when called as a set metamethod:
    - it returns a set object:
        q = r * s
        expect (prototype (q)).to_be "Set"
    - it is non-destructive:
        q = r * s
        expect (r).to_equal (Set {"foo", "bar", "baz"})
        expect (s).to_equal (Set {"bar", "baz", "quux"})
    - it returns a set containing members common to both arguments:
        expect (r * s).to_equal (Set {"bar", "baz"})


- describe member:
  - before: s = Set {"foo", "bar"}

  - context when called as a Set module function:
    - it succeeds when set contains the given member:
        expect (Set.member (s, "foo")).to_be (true)
    - it fails when set does not contain the given member:
        expect (Set.member (s, "baz")).not_to_be (true)
    - it works with the empty set:
        s = Set {}
        expect (Set.member (s, "foo")).not_to_be (true)
  - context when called as a set metamethod:
    - it succeeds when set contains the given member:
        expect (s["foo"]).to_be (true)
    - it fails when set does not contain the given member:
        expect (s["baz"]).not_to_be (true)
    - it works with the empty set:
        s = Set {}
        expect (s["foo"]).not_to_be (true)


- describe proper_subset:
  - before:
      r = Set {"foo", "bar", "baz"}
      s = Set {"bar", "baz"}

  - context when called as a Set module function:
    - it succeeds when set contains all elements of another:
        expect (Set.proper_subset (s, r)).to_be (true)
    - it fails when two sets are equal:
        r = s {}
        expect (Set.proper_subset (s, r)).to_be (false)
    - it fails when set does not contain all elements of another:
        s = s + Set {"quux"}
        expect (Set.proper_subset (r, s)).to_be (false)
  - context when called as a set metamethod:
    - it succeeds when set contains all elements of another:
        expect (s < r).to_be (true)
    - it fails when two sets are equal:
        r = s {}
        expect (s < r).to_be (false)
    - it fails when set does not contain all elements of another:
        s = s + Set {"quux"}
        expect (r < s).to_be (false)


- describe subset:
  - before:
      r = Set {"foo", "bar", "baz"}
      s = Set {"bar", "baz"}

  - context when called as a Set module function:
    - it succeeds when set contains all elements of another:
        expect (Set.subset (s, r)).to_be (true)
    - it succeeds when two sets are equal:
        r = s {}
        expect (Set.subset (s, r)).to_be (true)
    - it fails when set does not contain all elements of another:
        s = s + Set {"quux"}
        expect (Set.subset (r, s)).to_be (false)
  - context when called as a set metamethod:
    - it succeeds when set contains all elements of another:
        expect (s <= r).to_be (true)
    - it succeeds when two sets are equal:
        r = s {}
        expect (s <= r).to_be (true)
    - it fails when set does not contain all elements of another:
        s = s + Set {"quux"}
        expect (r <= s).to_be (false)


- describe symmetric_difference:
  - before:
      r = Set {"foo", "bar", "baz"}
      s = Set {"bar", "baz", "quux"}

  - context when called as a Set module function:
    - it returns a set object:
        expect (prototype (Set.symmetric_difference (r, s))).
          to_be "Set"
    - it is non-destructive:
        Set.symmetric_difference (r, s)
        expect (r).to_equal (Set {"foo", "bar", "baz"})
        expect (s).to_equal (Set {"bar", "baz", "quux"})
    - it returns a set containing members in only one argument set:
        expect (Set.symmetric_difference (r, s)).
          to_equal (Set {"foo", "quux"})
  - context when called as a set metamethod:
    - it returns a set object:
        expect (prototype (r / s)).to_be "Set"
    - it is non-destructive:
        q = r / s
        expect (r).to_equal (Set {"foo", "bar", "baz"})
        expect (s).to_equal (Set {"bar", "baz", "quux"})
    - it returns a set containing members in only one argument set:
        expect (r / s).to_equal (Set {"foo", "quux"})


- describe union:
  - before:
      r = Set {"foo", "bar", "baz"}
      s = Set {"bar", "baz", "quux"}

  - context when called as a Set module function:
    - it returns a set object:
        expect (prototype (Set.union (r, s))).to_be "Set"
    - it is non-destructive:
        Set.union (r, s)
        expect (r).to_equal (Set {"foo", "bar", "baz"})
        expect (s).to_equal (Set {"bar", "baz", "quux"})
    - it returns a set containing members in only one argument set:
        expect (Set.union (r, s)).
          to_equal (Set {"foo", "bar", "baz", "quux"})
  - context when called as a set metamethod:
    - it returns a set object:
        expect (prototype (r + s)).to_be "Set"
    - it is non-destructive:
        q = r + s
        expect (r).to_equal (Set {"foo", "bar", "baz"})
        expect (s).to_equal (Set {"bar", "baz", "quux"})
    - it returns a set containing members in only one argument set:
        expect (r + s).to_equal (Set {"foo", "bar", "baz", "quux"})


- describe __tostring:
  - before:
      s = Set {"foo", "bar", "baz"}

  - it returns a string:
      expect (type (tostring (s))).to_be "string"
  - it shows the type name:
      expect (tostring (s)).to_contain "Set"
  - it contains the ordered set elements:
      expect (tostring (s)).to_contain "bar, baz, foo"
